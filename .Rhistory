any(ints < 0)
all(ints > 0)
library(swirl)
swirl()
Sys.Date()
mean(c(2,4,5))
submit(boring_function(5))
submit
submit()
boring_function('My_first_function')
boring_function('My first function')
boring_function('My first function!')
boring_function
submit()
submit()
source('C:/Users/ADMIN/AppData/Local/Temp/Rtmp6dCmWc/my_mean.R')
my_mean(c(1:10))
source('C:/Users/ADMIN/AppData/Local/Temp/Rtmp6dCmWc/my_mean.R')
source('C:/Users/ADMIN/AppData/Local/Temp/Rtmp6dCmWc/my_mean.R')
my_mean(1:10)
source('C:/Users/ADMIN/AppData/Local/Temp/Rtmp6dCmWc/my_mean.R')
my_mean(1:10)
submit
submit()
my_mean(c(4,5,10))
source('C:/Users/ADMIN/AppData/Local/Temp/Rtmp6dCmWc/remainder.R')
submit()
remainder(5)
remainder(11, 5)
source('C:/Users/ADMIN/AppData/Local/Temp/Rtmp6dCmWc/remainder.R')
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(stdev, c(1.4, 3.6, 7.9, 8.8))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
source('C:/Users/ADMIN/AppData/Local/Temp/Rtmp6dCmWc/telegram.R')
source('C:/Users/ADMIN/AppData/Local/Temp/Rtmp6dCmWc/telegram.R')
submit()
telegram("very", "boring")
submit()
source('C:/Users/ADMIN/AppData/Local/Temp/Rtmp6dCmWc/mad_libs.R')
submit()
submit
submit()
source('C:/Users/ADMIN/AppData/Local/Temp/Rtmp6dCmWc/mad_libs.R')
submit()
source('C:/Users/ADMIN/AppData/Local/Temp/Rtmp6dCmWc/mad_libs.R')
submit()
source('C:/Users/ADMIN/AppData/Local/Temp/Rtmp6dCmWc/mad_libs.R')
submit()
mad_libs(place = "Salem", adjective = "Few", noun ="Rules")
library(datasets)
data("iris")
iris
tapply(iris$Sepal.Length, iris$Species, mean)
exit
quit()
library(swirl)
ls()
rm(list=ls()
)
swirl
swirl()
swirl()
ls
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
?LETTERS
sample(LETTERS, 4)
LETTERS
sample(LETTERS)
flips <- sample(0:1, 1, replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
library(swirl)
rm(list=ls())
swirl()
library(datasets)
data("cars")
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(y = cars$speed, x = cars$dist)
plot(cars)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
set.seed(1)
rpois(5, 2)
source('F:/Datascience/Myfiles/cachematrix.R')
a <- makeCacheMatrix()
a$set(matrix(1:4, 2, 2))
cacheSolve(a)
cacheSolve(a)
library(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
package_version("dplyr")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
do select(cran, -time)
select(cran, -time)
-5:20
-(5:20)
select(cran, -(x:size))
cran
select(cran, -(x:size))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = Size - 1000)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(deplyr)
library(dplyr)
library(dplyr)
library(swirl)
swirl()
library(dplyr)
tbl_df(cran)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(CRAN.packages())
by_package <- group_by(CRAN)
by_package <- cran %>% group_by(package)
by_package <- group_by(cran, package)
by_package
mean(size)
?mean
summarize(by_package)
summarize(by_package, mean(size))
source('C:/Users/ADMIN/AppData/Local/Temp/RtmpETJ2fr/summarize1.R')
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, count desc)
top_counts_sorted <- arrange(top_counts, count 'desc')
top_counts_sorted <- arrange(top_counts, count(desc))
rlang::last_error()
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_counts_sorted)
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
source('C:/Users/ADMIN/AppData/Local/Temp/RtmpETJ2fr/chain1.R')
gfg
View(myresult)
source('C:/Users/ADMIN/AppData/Local/Temp/RtmpETJ2fr/chain1.R')
source('C:/Users/ADMIN/AppData/Local/Temp/RtmpETJ2fr/chain1.R')
source('C:/Users/ADMIN/AppData/Local/Temp/RtmpETJ2fr/chain1.R')
myresult
source('C:/Users/ADMIN/AppData/Local/Temp/RtmpETJ2fr/chain1.R')
library(dplyr)
library(swirl)
swirl()
source('C:/Users/ADMIN/AppData/Local/Temp/RtmpEjCakx/chain1.R')
source('C:/Users/ADMIN/AppData/Local/Temp/RtmpEjCakx/chain1.R')
source('C:/Users/ADMIN/AppData/Local/Temp/RtmpEjCakx/chain1.R')
source('C:/Users/ADMIN/AppData/Local/Temp/RtmpEjCakx/chain1.R')
source('C:/Users/ADMIN/AppData/Local/Temp/RtmpEjCakx/chain1.R')
source('C:/Users/ADMIN/AppData/Local/Temp/RtmpEjCakx/chain1.R')
top_counts
source('C:/Users/ADMIN/AppData/Local/Temp/RtmpEjCakx/chain1.R')
source('C:/Users/ADMIN/AppData/Local/Temp/RtmpEjCakx/chain1.R')
source('C:/Users/ADMIN/AppData/Local/Temp/RtmpEjCakx/chain1.R')
source('C:/Users/ADMIN/AppData/Local/Temp/RtmpEjCakx/chain1.R')
source('F:/Datascience/Myfiles/chaining.R')
?
submit()
submit()
source('C:/Users/ADMIN/AppData/Local/Temp/RtmpEjCakx/chain1.R')
submit()
?mutate
submit
submit()
submit()
submit()
submit()
submit()
submit()
cran
cran
submit()
submit()
submit()
View(cran)
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
ECHO=TRUE
set.seed(1337)
lambda = 0.2
exponentials = 40
simMeans = NULL
for (i in 1 : 1000) simMeans = c(simMeans, mean(rexp(exponentials, lambda)))
mean(simMeans)
lambda^-1
abs(mean(simMeans)-lambda^-1)
var(simMeans)
(lambda * sqrt(exponentials))^-2
abs(var(simMeans)-(lambda * sqrt(exponentials))^-2)
library(ggplot2)
ggplot(data.frame(y=simMeans), aes(x=y)) +
geom_histogram(aes(y=..density..), binwidth=0.2, fill="#0072B2",
color="black") +
stat_function(fun=dnorm, arg=list(mean=lambda^-1,
sd=(lambda*sqrt(exponentials))^-1),
size=2) +
labs(title="Plot of the Simulations", x="Simulation Mean")
ggplot(data.frame(y=simMeans), aes(x=y)) +
geom_histogram(aes(y=..density..), binwidth=0.2, fill="#0072B2",
color="black") +
stat_function(fun=dnorm, args = list(mean=lambda^-1,
sd = (lambda*sqrt(exponentials))^-1), size=2) +
labs(title="Plot of the Simulations", x="Simulation Mean")
library(datasets)
data(ToothGrowth)
str(ToothGrowth)
head(ToothGrowth)
summary(ToothGrowth)
library(ggplot2)
t = ToothGrowth
levels(t$supp) <- c("Orange Juice", "Ascorbic Acid")
ggplot(t, aes(x=factor(dose), y=len)) +
facet_grid(.~supp) +
geom_boxplot(aes(fill = supp), show_guide = FALSE) +
labs(title="Guinea pig tooth length by dosage for each type of supplement",
x="Dose (mg/day)",
y="Tooth Length")
library(ggplot2)
t = ToothGrowth
levels(t$supp) <- c("Orange Juice", "Ascorbic Acid")
ggplot(t, aes(x=factor(dose), y=len)) +
facet_grid(.~supp) +
geom_boxplot(aes(fill = supp)) +
labs(title="Guinea pig tooth length by dosage for each type of supplement",
x="Dose (mg/day)",
y="Tooth Length")
library(ggplot2)
t = ToothGrowth
levels(t$supp) <- c("Orange Juice", "Ascorbic Acid")
ggplot(t, aes(x=factor(dose), y=len)) +
facet_grid(.~supp) +
geom_boxplot(aes(fill = supp), show.legend = False) +
labs(title="Guinea pig tooth length by dosage for each type of supplement",
x="Dose (mg/day)",
y="Tooth Length")
hypoth1<-t.test(len ~ supp, data = t)
hypoth1$conf.int
hypoth1$p.value
hypoth2<-t.test(len ~ supp, data = subset(t, dose == 0.5))
hypoth2$conf.int
hypoth2$p.value
hypoth3<-t.test(len ~ supp, data = subset(t, dose == 1))
hypoth3$conf.int
hypoth3$p.value
hypoth4<-t.test(len ~ supp, data = subset(t, dose == 2))
hypoth4$conf.int
hypoth4$p.value
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
install.packages(c("caret", "R"))
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
install.packages("ElemStatLearn")
install.packages("pgmm")
install.packages("rpart")
library(caret)
library(rpart)
library(rpart.plot)
library(RColorBrewer)
library(rattle)
library(randomForest)
library(e1071)
library(gbm)
install.packages("rattle")
install.packages("randomForest")
install.packages("e1071")
install.packages("gbm")
library(caret)
library(rpart)
library(rpart.plot)
library(RColorBrewer)
library(rattle)
library(randomForest)
library(e1071)
library(gbm)
set.seed(12345)
trainUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
training <- read.csv(url(trainUrl), na.strings=c("NA","#DIV/0!",""))
testing <- read.csv(url(testUrl), na.strings=c("NA","#DIV/0!",""))
inTrain <- createDataPartition(training$classe, p=0.6, list=FALSE)
myTraining <- training[inTrain, ]
myTesting <- training[-inTrain, ]
dim(myTraining); dim(myTesting)
nzv <- nearZeroVar(myTraining, saveMetrics=TRUE)
myTraining <- myTraining[,nzv$nzv==FALSE]
nzv<- nearZeroVar(myTesting,saveMetrics=TRUE)
myTesting <- myTesting[,nzv$nzv==FALSE]
myTraining <- myTraining[c(-1)]
trainingV3 <- myTraining
for(i in 1:length(myTraining)) {
if( sum( is.na( myTraining[, i] ) ) /nrow(myTraining) >= .7) {
for(j in 1:length(trainingV3)) {
if( length( grep(names(myTraining[i]), names(trainingV3)[j]) ) == 1)  {
trainingV3 <- trainingV3[ , -j]
}
}
}
}
myTraining <- trainingV3
rm(trainingV3)
clean1 <- colnames(myTraining)
clean2 <- colnames(myTraining[, -58])  # remove the classe column
myTesting <- myTesting[clean1]         # allow only variables in myTesting that are also in myTraining
testing <- testing[clean2]             # allow only variables in testing that are also in myTraining
dim(myTesting)
dim(testing)
for (i in 1:length(testing) ) {
for(j in 1:length(myTraining)) {
if( length( grep(names(myTraining[i]), names(testing)[j]) ) == 1)  {
class(testing[j]) <- class(myTraining[i])
}
}
}
# To get the same class between testing and myTraining
testing <- rbind(myTraining[2, -58] , testing)
testing <- testing[-1,]
set.seed(12345)
modFitA1 <- rpart(classe ~ ., data=myTraining, method="class")
fancyRpartPlot(modFitA1)
predictionsA1 <- predict(modFitA1, myTesting, type = "class")
cmtree <- confusionMatrix(predictionsA1, myTesting$classe)
cmtree
head(myTesting)
cmtree <- confusionMatrix(predictionsA1, myTesting$classe)
? download.file
library(caret)
library(rpart)
library(rpart.plot)
library(randomForest)
library(corrplot)
trainUrl <-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
trainFile <- "./data/pml-training.csv"
testFile  <- "./data/pml-testing.csv"
if (!file.exists("./data")) {
dir.create("./data")
}
if (!file.exists(trainFile)) {
download.file(trainUrl, destfile=trainFile)
}
if (!file.exists(testFile)) {
download.file(testUrl, destfile=testFile)
}
trainRaw <- read.csv("./data/pml-training.csv")
testRaw <- read.csv("./data/pml-testing.csv")
dim(trainRaw)
dim(testRaw)
sum(complete.cases(trainRaw))
trainRaw <- trainRaw[, colSums(is.na(trainRaw)) == 0]
testRaw <- testRaw[, colSums(is.na(testRaw)) == 0]
classe <- trainRaw$classe
trainRemove <- grepl("^X|timestamp|window", names(trainRaw))
trainRaw <- trainRaw[, !trainRemove]
trainCleaned <- trainRaw[, sapply(trainRaw, is.numeric)]
trainCleaned$classe <- classe
testRemove <- grepl("^X|timestamp|window", names(testRaw))
testRaw <- testRaw[, !testRemove]
testCleaned <- testRaw[, sapply(testRaw, is.numeric)]
set.seed(22519) # For reproducibile purpose
inTrain <- createDataPartition(trainCleaned$classe, p=0.70, list=F)
trainData <- trainCleaned[inTrain, ]
testData <- trainCleaned[-inTrain, ]
controlRf <- trainControl(method="cv", 5)
modelRf <- train(classe ~ ., data=trainData, method="rf", trControl=controlRf, ntree=250)
modelRf
predictRf <- predict(modelRf, testData)
confusionMatrix(testData$classe, predictRf)
? confusionMatrix
confusionMatrix
predictRf
? confusionMatrix
confusionMatrix(testData$classe, predictRf)
confusionMatrix(predictRf, testData$classe)
confusionMatrix(factor(testData$classe),factor(predictRf))
accuracy <- postResample(predictRf, testData$classe)
accuracy
oose <- 1 - as.numeric(confusionMatrix(factor(testData$classe),factor(predictRf))$overall[1])
oose
?postResample
accuracy <- postResample(factor(predictRf), factor(testData$classe))
accuracy
oose <- 1 - as.numeric(confusionMatrix(factor(testData$classe),factor(predictRf))$overall[1])
oose
result <- predict(modelRf, testCleaned[, -length(names(testCleaned))])
result
corrPlot <- cor(trainData[, -length(names(trainData))])
corrplot(corrPlot, method="color")
treeModel <- rpart(classe ~ ., data=trainData, method="class")
prp(treeModel) # fast plot
predict.quiz <- predict(modelRf, testData)
predict.quiz
predict.quiz <- predict(modelRf, testCleaned)
predict.quiz
install.packages("leaflet")
ver
version
shiny::runApp('F:/Datascience/Myfiles/ShinyApp/My Assignment')
shiny::runApp()
rsconnect::setAccountInfo(name='mageshsalem',
token='44474EE9039E07ED15D09E8F59742906',
secret='<SECRET>')
rsconnect::setAccountInfo(name='mageshsalem',
token='44474EE9039E07ED15D09E8F59742906',
secret='z5C1AMO5WUU2IYBWB+JVwjC8G0GMnaE7oDZmXjLK')
library(rsconnect)
rsconnect::deployApp('F:/Datascience/Myfiles/ShinyApp/My Assignment')
